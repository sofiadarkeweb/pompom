{"version":3,"sources":["components/Header.jsx","soundfilebreak.wav","components/BreakTimer.jsx","components/Button.jsx","soundfile2.wav","components/WorkTimer.jsx","components/TestTimer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Alarm","Audio","soundfile","BreakTimer","useState","colon","setColon","formatValue","value","initialTime","startImmediately","direction","onStart","console","log","checkpoints","time","callback","play","start","stop","reset","Fragment","Minutes","style","color","Seconds","onClick","Button","props","handleClick","title","WorkTimer","timeToUpdate","id","ref","TestTimer","ms","minutes","Math","floor","seconds","toString","padStart","join","App","workTimerShowing","setWorkTimerShowing","e","target","innerText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16ce1bb0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n\treturn (\n\t\t<header className=\"header-title\">\n\t\t\t<h1>PomPom</h1>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/soundfilebreak.492ea39f.wav\";","import React, { useState } from \"react\";\nimport Timer from \"react-compound-timer\";\n\nimport soundfile from \"../soundfilebreak.wav\";\n\nconst Alarm = new Audio(soundfile);\n\nconst BreakTimer = () => {\n\tconst [colon, setColon] = useState(\":\");\n\n\tfunction changeColon() {\n\t\tsetColon(\"|\");\n\t}\n\n\treturn (\n\t\t<Timer\n\t\t\tformatValue={(value) => `${value < 10 ? `0${value}` : value}`}\n\t\t\tinitialTime={300000}\n\t\t\tstartImmediately={false}\n\t\t\tdirection=\"backward\"\n\t\t\tonStart={() => console.log(\"onStart hook\")}\n\t\t\tcheckpoints={[\n\t\t\t\t{\n\t\t\t\t\ttime: 0,\n\t\t\t\t\tcallback: () => Alarm.play(),\n\t\t\t\t\t// callback: () => alert(\"Checkpoint A\"),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttime: 0,\n\t\t\t\t\tcallback: () => changeColon(),\n\t\t\t\t\t// callback: () => alert(\"Checkpoint A\"),\n\t\t\t\t},\n\t\t\t]}\n\n\t\t\t// onStop = {}\n\t\t>\n\t\t\t{({ start, stop, reset }) => (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className=\"the-time\">\n\t\t\t\t\t\t{/* <h2>Break</h2> */}\n\t\t\t\t\t\t<Timer.Minutes />\n\t\t\t\t\t\t<span style={{ color: \"teal\" }}>{colon}</span>\n\t\t\t\t\t\t<Timer.Seconds />\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"action-btns\" onClick={start}>\n\t\t\t\t\t\t\tStart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"action-btns\" onClick={stop}>\n\t\t\t\t\t\t\tStop\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"action-btns\" onClick={reset}>\n\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</Timer>\n\t);\n};\n\nexport default BreakTimer;\n","import React from \"react\";\n\nconst Button = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<button className={props.className} onClick={props.handleClick}>\n\t\t\t\t{props.title}\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/soundfile2.b222ebf0.wav\";","import React from \"react\";\nimport Timer from \"react-compound-timer\";\nimport { useState } from \"react\";\nimport soundfile from \"../soundfile2.wav\";\n\nconst Alarm = new Audio(soundfile);\n\nconst WorkTimer = () => {\n\tconst [colon, setColon] = useState(\":\");\n\n\tfunction changeColon() {\n\t\tsetColon(\"|\");\n\t}\n\n\treturn (\n\t\t<Timer\n\t\t\tformatValue={(value) => `${value < 10 ? `0${value}` : value}`}\n\t\t\tinitialTime={1500000}\n\t\t\tstartImmediately={false}\n\t\t\tdirection=\"backward\"\n\t\t\ttimeToUpdate={0}\n\t\t\tcheckpoints={[\n\t\t\t\t{\n\t\t\t\t\ttime: 0,\n\t\t\t\t\tcallback: () => Alarm.play(),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttime: 0,\n\t\t\t\t\tcallback: () => changeColon(),\n\t\t\t\t},\n\t\t\t]}\n\t\t\t// onStop={() => test()}\n\t\t>\n\t\t\t{({ start, stop, reset }) => (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className=\"the-time\" id=\"the-time-id\">\n\t\t\t\t\t\t<Timer.Minutes /*formatValue={(value) => `${value}`}*/ />\n\t\t\t\t\t\t<span ref=\"colon\" style={{ color: \"orange\" }}>\n\t\t\t\t\t\t\t{colon}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<Timer.Seconds />\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* {test()} */}\n\t\t\t\t\t{/* <h2>{name}</h2> */}\n\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"action-btns\" onClick={start}>\n\t\t\t\t\t\t\tStart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"action-btns\" onClick={stop}>\n\t\t\t\t\t\t\tStop\n\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t<button className=\"action-btns\" onClick={reset}>\n\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</Timer>\n\t);\n};\n\nexport default WorkTimer;\n","import React from \"react\";\nimport { useState } from \"react\";\n\nconst TestTimer = () => {\n\tconst msToString = (ms) => {\n\t\tconst minutes = Math.floor((ms / 1000 / 60) % 60);\n\t\tconst seconds = Math.floor((ms / 1000) % 60);\n\t\treturn [\n\t\t\tminutes.toString().padStart(2, \"0\"),\n\t\t\tseconds.toString().padStart(2, \"0\"),\n\t\t].join(\":\");\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{msToString}</h1>\n\t\t</div>\n\t);\n};\n\nexport default TestTimer;\n","import \"./App.css\";\n// import Timer from \"./components/Timer\";\nimport Header from \"./components/Header\";\nimport BreakTimer from \"./components/BreakTimer\";\nimport Button from \"./components/Button\";\nimport Tasks from \"./components/Tasks\";\nimport WorkTimer from \"./components/WorkTimer\";\nimport { useState } from \"react\";\nimport TestTimer from \"./components/TestTimer\";\n\nconst children = ({ remainingTime }) => {\n\tconst minutes = Math.floor(remainingTime / 60);\n\tconst seconds = remainingTime % 60;\n\treturn `${minutes}m:${seconds}s`;\n};\n\nfunction App() {\n\tconst [workTimerShowing, setWorkTimerShowing] = useState(true);\n\t// const [backColor, setBackColor] = useState(true);\n\n\tfunction handleClick(e) {\n\t\te.target.innerText === \"work\"\n\t\t\t? setWorkTimerShowing(true)\n\t\t\t: setWorkTimerShowing(false);\n\t}\n\n\t// function onChange(){\n\t// \te.target.innerText === \"work\"\n\t// \t? setBackColor\n\t// }\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"App\"\n\t\t\t// style={{\n\t\t\t// \tbackgroundColor: \"blue\",\n\t\t\t// }}\n\t\t>\n\t\t\t<Header />\n\t\t\t<TestTimer />\n\t\t\t<div className=\"work-break\">\n\t\t\t\t<Button className=\"timer-btn\" title=\"work\" handleClick={handleClick} />\n\t\t\t\t<Button className=\"timer-btn\" title=\"break\" handleClick={handleClick} />\n\t\t\t</div>\n\t\t\t{workTimerShowing && <WorkTimer />}\n\t\t\t{!workTimerShowing && <BreakTimer />}\n\t\t\t{/* <Tasks /> */}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}